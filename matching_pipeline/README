# **HSDS Entity Grouping and Clustering System (RL Enhanced)**

## **System Overview**

The entity grouping system identifies and links related organizations across a federated database. This process is now significantly enhanced by an **intelligent Reinforcement Learning (RL) system**. This RL system plays a crucial role in determining the confidence of matches and continuously learns from human feedback to improve its accuracy and decision-making over time. The pipeline operates in the following key phases:

1. **Entity Identification**: Extracts entities (organizations) from the organization table and links them to their related records (services, phones, locations, etc.).  
2. **Context Feature Extraction**: Gathers a comprehensive set of characteristics (features) for each entity. These features are vital for the RL system's ContextModel to understand the nuances of each entity and the context of potential matches.  
3. **Incremental Group Formation (with RL-Guided Confidence)**: Matches entities based on various criteria (URL, phone, email, address, name, geospatial proximity). Each potential match is now a **pairwise link** between two entities. The confidence\_score for these pairwise links is dynamically determined and refined by the RL system's MatchingOrchestrator.  
4. **Cluster Consolidation (with RL-Assisted Verification)**: Combines overlapping pairwise entity groups into unified clusters. This phase also leverages the RL system to verify the internal coherence and quality of newly formed clusters.  
5. **Service Embedding Generation**: Creates vector embeddings (numerical representations) for service names and descriptions, enabling semantic understanding and comparison.  
6. **Service Matching**: Identifies potentially identical services within the consolidated entity clusters by considering semantic similarity (using embeddings) and geospatial proximity.

*(For a detailed, narrative explanation of how the Reinforcement Learning system determines confidence, learns from feedback, and interacts with different matching methods, please see the "Understanding Our Intelligent Matching System" document.)*

## **Database Schema for Intelligent Matching and Pairwise Grouping**

The system relies on an extended database schema, primarily within the public and clustering\_metadata schemas, to manage entities, pairwise groups, consolidated clusters, matching details, and the operational data for the RL system.  
**Key Tables in public schema:**

* organization: Core table for organization data. Contains embedding for organization name/description.  
* service: Core table for service data. Contains embedding\_v2 for service name/description.  
* location: Stores location data, including geom for geospatial calculations.  
* entity: Represents an organization extracted for the entity resolution process. Linked to organization.id.  
  * id: Primary key.  
  * organization\_id: Foreign key to public.organization.  
  * name: Name of the organization.  
* entity\_feature: Links entities to their associated records in other HSDS tables (e.g., service, phone, location).  
  * entity\_id: Foreign key to public.entity.  
  * table\_name: Name of the HSDS table (e.g., 'service', 'phone').  
  * table\_id: ID of the record in the specified table\_name.  
* entity\_group: **Crucially, this table now represents a pairwise link between two entities.**  
  * id: Primary key.  
  * entity\_id\_1: Foreign key to public.entity.  
  * entity\_id\_2: Foreign key to public.entity. (Constraint: entity\_id\_1 \< entity\_id\_2 to ensure unique pairs).  
  * method\_type: The primary matching method that established this link (e.g., 'email', 'name').  
  * confidence\_score: The **RL-guided confidence score** for this specific pairwise match.  
  * match\_values: A JSONB field storing the specific values that led to the match (e.g., the shared email, normalized names, similarity scores pre-RL).  
  * group\_cluster\_id: Foreign key to public.group\_cluster, indicating which consolidated cluster this pair belongs to (populated during cluster consolidation).  
  * version: Version number for the match record.  
* group\_cluster: Represents a consolidated set of (pairwise) entity\_group records that, through shared entities, form a larger cluster.  
  * id: Primary key.  
  * name, description: Optional metadata for the cluster.  
  * entity\_count: Number of unique entities in this cluster.  
  * group\_count: Number of pairwise entity\_group links in this cluster.  
* service\_match: Records potential matches between two services within the same group\_cluster.  
  * id: Primary key.  
  * group\_cluster\_id: The cluster in which these services were compared.  
  * service\_id\_1, service\_id\_2: Foreign keys to public.service.  
  * similarity\_score: The calculated similarity (e.g., cosine similarity of embeddings).  
  * match\_reasons: Textual description of why the match was made.  
  * status: e.g., 'potential', 'confirmed', 'rejected'.  
* service\_cluster & clustered\_service: (If implementing service-level clustering based on confirmed service\_match records)  
  * service\_cluster (formerly): This seems to have been refactored. The provided DDL shows service\_cluster with service\_id and cluster\_id as a PK, acting more like a junction table (renamed from the original doc's clustered\_service). Let's assume public.service\_cluster now directly links a service to a conceptual service cluster ID. If a separate table for service cluster metadata is needed, it would be a new addition. For now, we'll describe public.service\_cluster as per the DDL.  
  * public.service\_cluster: Links a service\_id to a cluster\_id (this cluster\_id would be a conceptual grouping ID for services, distinct from public.group\_cluster.id which is for entities).

**Key Tables in clustering\_metadata schema (Supporting RL and Pipeline Operations):**

* pipeline\_run: Logs each execution of the entity resolution pipeline.  
  * Stores run timestamps, processing times for different stages (entity processing, matching, clustering, service matching), and overall statistics (total entities, groups, clusters, service matches).  
* matching\_method\_stats: Records statistics for each matching method per pipeline run.  
  * pipeline\_run\_id: Foreign key to pipeline\_run.  
  * method\_type: The matching method (e.g., 'email', 'name').  
  * groups\_created: Number of **new pairwise entity\_group links** created by this method.  
  * entities\_matched: Number of unique entities participating in these new pairwise links.  
  * avg\_confidence: Average RL-derived confidence\_score for the new links.  
  * avg\_group\_size: This will consistently be **2.0** due to the pairwise structure.  
* cluster\_stats: Records statistics about the consolidated clusters per pipeline run.  
  * pipeline\_run\_id: Foreign key to pipeline\_run.  
  * total\_clusters: Total number of group\_cluster records.  
  * avg\_entities\_per\_cluster: Average number of unique entities per group\_cluster.  
  * avg\_groups\_per\_cluster: Average number of pairwise entity\_group links per group\_cluster.  
  * largest\_cluster\_size: Number of unique entities in the largest cluster.  
* service\_match\_stats: Records statistics for the service matching phase per pipeline run.  
  * pipeline\_run\_id: Foreign key to pipeline\_run.  
  * total\_matches: Total number of service\_match records created.  
  * avg\_similarity: Average similarity score of these matches.  
* ml\_models: Stores the serialized state of the RL models (ContextModel and ConfidenceTuner).  
  * model\_type: e.g., 'ContextModel', 'ConfidenceTuner'.  
  * parameters: JSONB storing model data (e.g., serialized Random Forest, bandit arm statistics).  
  * version: Version of the model.  
  * metrics: JSONB for performance metrics of the model.  
* entity\_context\_features: Stores the detailed characteristics (features) extracted for each entity.  
  * entity\_id: Foreign key to public.entity.  
  * feature\_name: Name of the extracted feature (e.g., 'name\_complexity', 'service\_semantic\_coherence').  
  * feature\_value: Numerical value of the feature.  
* entity\_match\_pairs: Logs data related to each RL-guided decision for an entity pair.  
  * decision\_id: Foreign key to human\_review\_decisions (if reviewed).  
  * entity1\_id, entity2\_id: The pair of entities.  
  * method\_type: The matching method considered.  
  * prediction\_confidence: The confidence score assigned by the RL system.  
  * snapshotted\_features: JSONB of the entity context features used for this decision.  
  * context\_model\_version, confidence\_tuner\_version: Versions of the RL models used.  
* human\_review\_decisions: Stores decisions made by human data managers during review.  
  * id: Primary key.  
  * reviewer\_id: Identifier for the human reviewer.  
  * decision\_type: Type of decision (e.g., 'confirm\_match', 'split\_cluster').  
  * cluster\_id, entity\_id, correct\_cluster\_id: Relevant IDs for the review.  
  * confidence: Human-assigned confidence, if applicable.  
* human\_review\_method\_feedback: Stores specific feedback from human reviewers about the appropriateness of a matching method and its outcome for a pair.  
  * decision\_id: Foreign key to human\_review\_decisions.  
  * method\_type: The method being reviewed.  
  * was\_correct: Boolean indicating if the system's application of the method was correct.  
  * confidence\_adjustment: Suggested adjustment to confidence.  
* suggested\_actions: Lists matches or clusters flagged by the system (often due to RL-derived low confidence or verification failures) for human review.  
  * action\_type: e.g., 'REVIEW\_ENTITY\_IN\_GROUP', 'SUGGEST\_SPLIT\_CLUSTER'.  
  * entity\_id, group\_id\_1 (for pairwise entity\_group), cluster\_id: Relevant IDs.  
  * triggering\_confidence: The confidence score that triggered the suggestion.  
  * priority, status: For managing the review workflow.  
* cluster\_formation\_edges: (If used for diagnostics/analysis of cluster building) Stores information about edges considered during graph-based cluster consolidation.  
  * source\_group\_id, target\_group\_id: IDs of pairwise entity\_group records.  
  * calculated\_edge\_weight: Weight of the edge between these pairs (based on shared entities and confidences).

*(Refer to ddl\_introspection\_report.md and specific schema definition files for detailed column descriptions, types, and constraints.)*

## **Processing Flow**

### **1\. Entity Identification**

(This phase remains largely the same: an entity record is created for each organization, and entity\_feature links are established to connect organizations to their related data like services, phones, locations, etc.)  
┌─────────────┐          ┌─────────┐          ┌────────────────┐  
│ Organization│─────────▶│ Entity  │◀─────────│ Entity Feature │  
└─────────────┘          └─────────┘          └────────────────┘

1. Create a public.entity record for each public.organization.  
2. Find all related records (services, phones, locations, etc.) for each organization.  
3. Create public.entity\_feature links between entities and these related records.  
   The system checks for existing entities first to avoid duplicates.

### **2\. Context Feature Extraction (Crucial for RL)**

Before any matching occurs, the system extracts a rich set of contextual features for each entity. This is a distinct and critical phase for the RL system.

* **Purpose**: These features provide the ContextModel (part of the RL system) with the necessary information to understand the characteristics and nuances of each entity. This detailed understanding is vital for making context-aware matching decisions.  
* **Process (feature\_extraction.rs \-\> entity\_organizations::extract\_and\_store\_all\_entity\_context\_features()):**  
  * For each entity in public.entity:  
    * Various characteristics are computed or queried. Examples include:  
      * Complexity of the organization's name.  
      * Completeness of its data profile (e.g., presence of email, phone, URL, address).  
      * Number of services, locations.  
      * Semantic properties derived from its name and service description embeddings (e.g., embedding\_centroid\_distance if applicable, service\_semantic\_coherence).  
  * These extracted features are stored in the clustering\_metadata.entity\_context\_features table, linking them to the respective entity\_id.  
* **Importance**: This ensures that when the MatchingOrchestrator evaluates a potential pair of entities, it has a comprehensive understanding of each entity individually, leading to more informed and nuanced matching predictions by the ContextModel and ConfidenceTuner.

### **3\. Incremental Group Formation (Pairwise with RL-Guided Confidence)**

For each matching method (URL, phone, email, address, name, geospatial), the system identifies **pairwise links** between entities.  
        ┌─────────┐           ┌─────────┐  
        │ Entity A│           │ Entity B│  
        └─────────┘           └─────────┘  
             │                     │  
             └───────RL-GUIDED─────┘  
                       MATCH  
                         │  
                         ▼  
        ┌──────────────────────────────────┐  
        │  Pairwise entity\_group           │  
        │ (Entity A, Entity B, method, RL\_confidence)│  
        └──────────────────────────────────┘

1. **Identify Candidate Pairs**: Each matching module (e.g., email.rs, name.rs) uses its specific logic to find potential pairs of entities that share a common attribute (e.g., same normalized email, similar names).  
2. **Check for Existing Pairwise Matches**: The system queries public.entity\_group to see if a specific pair has already been matched by the current method in a previous run to avoid redundant processing.  
3. **RL-Guided Scoring for New Pairs**:  
   * For each new candidate pair (Entity1, Entity2):  
     * The MatchingOrchestrator is invoked.  
     * Contextual features for Entity1 and Entity2 are retrieved from clustering\_metadata.entity\_context\_features (or extracted if not already present).  
     * The ContextModel analyzes these features to predict the most appropriate matching method and provides a contextual signal.  
     * The ConfidenceTuner selects an optimal confidence\_score for this specific pair and method, considering the ContextModel's advice and historical performance.  
4. **Record Pairwise Link with RL Confidence**:  
   * A new record is inserted into public.entity\_group.  
     * entity\_id\_1 and entity\_id\_2 store the IDs of the matched entities.  
     * method\_type stores the method that established the link (e.g., 'email').  
     * confidence\_score stores the **RL-derived confidence** from the ConfidenceTuner.  
     * match\_values (JSONB) stores the actual data points that caused the match (e.g., the shared normalized email, original names, pre-RL similarity scores for name matching).  
   * The MatchingOrchestrator logs details of this decision (features, model versions, outcome) into clustering\_metadata.entity\_match\_pairs for future retraining and analysis.  
   * If the confidence\_score is below predefined thresholds (see config.rs), an action may be logged in clustering\_metadata.suggested\_actions for human review.  
5. **Incremental Processing**: This approach is incremental. On subsequent runs, already processed and scored pairs for a given method can be skipped, improving efficiency.

This pairwise structure, with each link having an RL-derived confidence, provides a granular and nuanced foundation for the subsequent clustering phase.

### **4\. Cluster Consolidation (with RL-Assisted Verification)**

Overlapping pairwise entity\_group links are consolidated into larger, unified clusters.  
(E\_A, E\_B, conf\_AB)──┐  
                    ├─► Shared Entity E\_B  
(E\_B, E\_C, conf\_BC)──┘  
      │  
      ▼  
┌─────────────────────────┐  
│  Consolidated Cluster   │  
│  (E\_A, E\_B, E\_C)        │  
│  RL Verified            │  
└─────────────────────────┘

1. **Graph Building (consolidate\_clusters.rs \-\> build\_weighted\_xgraph):**  
   * A graph is constructed where **nodes are the pairwise entity\_group records** (representing a direct, RL-scored link between two entities).  
   * **Edges** are defined between two such entity\_group nodes if they **share a common entity**.  
     * Example: If entity\_group\_1 links (EntityA, EntityB) and entity\_group\_2 links (EntityB, EntityC), an edge is formed between entity\_group\_1 and entity\_group\_2 because they share EntityB.  
   * The **weight of this edge** is calculated based on the confidence\_score of the participating pairwise entity\_group links. A Noisy-Or aggregation can be used to combine these confidences.  
   * Information about these connections can be stored in clustering\_metadata.cluster\_formation\_edges for diagnostics.  
2. **Community Detection:**  
   * The system applies an advanced community detection algorithm (e.g., **Leiden algorithm**) to this graph of pairwise links.  
   * The algorithm identifies communities, which are sets of interconnected pairwise links. These communities form the basis of the consolidated clusters.  
3. **Cluster Record Creation and Updates:**  
   * For each community detected:  
     * A new public.group\_cluster record is created.  
     * All the pairwise public.entity\_group records that belong to this community are updated with the group\_cluster\_id of the newly formed cluster.  
     * The entity\_count (unique entities) and group\_count (number of pairwise links) for the group\_cluster are calculated and stored.  
4. **RL-Assisted Verification (consolidate\_clusters.rs \-\> verify\_clusters function):**  
   * After new group\_cluster records are formed, the MatchingOrchestrator (RL system) is invoked to assess their internal coherence.  
   * **Process**:  
     1. For a given group\_cluster, all unique entity IDs are collected from the entity\_id\_1 and entity\_id\_2 columns of the associated pairwise entity\_group records.  
     2. The system samples pairs of these unique entities from within the new cluster.  
     3. For each sampled pair, context features are extracted, and the ContextModel is used to predict how well they should belong together (i.e., predict a confidence score for their linkage *within the context of this cluster*).  
   * **Outcome**:  
     * If the average confidence for these internal pairs is low (below VERIFICATION\_THRESHOLD from config.rs), a SUGGEST\_SPLIT\_CLUSTER action is logged in clustering\_metadata.suggested\_actions. This indicates the cluster might be too broad or contain unrelated entities, flagging it for human review.

### **5\. Service Embedding Generation**

(This phase remains largely the same as described in the original document: a pre-trained transformer model like BGE-small-en-v1.5 is used to convert service names and descriptions into dense vector embeddings, which are stored in service.embedding\_v2.)  
┌───────────────┐     ┌────────────────┐     ┌─────────────────┐  
│    SERVICE    │     │   EMBEDDING    │     │ \[0.1, 0.8, ... \]│  
│ NAME \+ DESC.  │────▶│     MODEL      │────▶│ \[0.5, 0.2, ... \]│  
└───────────────┘     └────────────────┘     └─────────────────┘

This step is crucial for enabling semantic similarity comparisons in the Service Matching phase.

### **6\. Service Matching**

This process identifies potentially identical services, but critically, it operates *within* the boundaries of the group\_cluster records formed in the previous step.  
┌───────────┐          ┌────────────────────────────┐  
│  CLUSTER  │───Pair───┤ Service \- SHELTER SERVICES │  
│ (IDs:A,B,C)│ (A,B)    └────────────────────────────┘  
└───────────┘    │                    │  
                 │                    │ Semantic \+ Geospatial  
                 │                    │ Similarity  
                 │                    ▼  
                 │     ┌────────────────────────────┐  
                 └Pair─┤ Service \- BEDS FOR THOSE   │  
                  (B,C)│ IN NEED                    │  
                       └────────────────────────────┘  
                                     │  
                                     ▼  
                               SERVICE\_MATCH  
                               (Shelter, Beds)  
                                     │  
                                     ▼  
                        ┌─────────────────────┐  
                        │   SERVICE\_CLUSTER   │ (Conceptual)  
                        └─────────────────────┘  
                                     │  
                                     ▼  
                        ┌─────────────────────┐  
                        │  CLUSTERED\_SERVICE  │ (Links service to conceptual cluster)  
                        └─────────────────────┘

**Service Matching Process (service\_matching/semantic\_geospatial.rs):**

1. **Cluster-Based Processing**:  
   * The system iterates through each group\_cluster identified in the consolidation phase.  
   * **Fetching Services for a Cluster**: To get all services associated with a given group\_cluster\_id:  
     1. Select all pairwise entity\_group records with that group\_cluster\_id.  
     2. Collect all unique entity\_id\_1 and entity\_id\_2 values from these records.  
     3. Fetch all services (via entity\_feature) linked to these unique entity IDs that have a non-NULL embedding\_v2.  
   * This dramatically reduces the comparison space, as services are only compared if their parent organizations are already deemed related and part of the same cluster.  
2. **Two-Pronged Similarity Check (for pairs of services within the cluster)**:  
   * **Semantic Similarity**:  
     * Uses vector cosine similarity (pgvector's \<=\> operator on service.embedding\_v2) to find semantically similar service pairs.  
     * Applies a high similarity threshold (e.g., 0.85 from config.rs) to ensure quality.  
   * **Geospatial Proximity**:  
     * If both services in a semantically similar pair have associated locations (via service\_at\_location and location), the system checks if they share at least one pair of nearby locations.  
     * Uses PostGIS's ST\_DWithin on location.geom (e.g., within a 2km radius).  
     * If location data is incomplete for one or both services, it may fall back to semantic-only matching, potentially with an adjusted confidence or flagging.  
3. **Match Recording**:  
   * For service pairs meeting both semantic and geospatial criteria (or semantic-only where applicable), a public.service\_match record is created.  
   * group\_cluster\_id (the entity cluster ID), service\_id\_1, service\_id\_2, similarity\_score, and match\_reasons are stored.  
   * An initial status (e.g., 'potential') is assigned for human review.  
4. **Statistics Tracking**:  
   * Comprehensive statistics are logged in clustering\_metadata.service\_match\_stats (e.g., total matches, average similarity, distribution of similarity scores).  
5. **Incremental Updates**: The process can be run incrementally, typically focusing on services within newly formed or updated clusters, or services that haven't been matched before.

**Service Cluster Formation (Conceptual, based on confirmed matches):**

* After human reviewers confirm service\_match records (updating their status to 'confirmed'), these matches can be used to build conceptual service clusters.  
* The public.service\_cluster table (as per DDL: PK on service\_id, cluster\_id) would link individual services to these conceptual service cluster IDs.  
* This allows for managing sets of services that are deemed identical or highly equivalent.

## **Matching Methods and Reinforcement Learning Integration**

The core of the entity resolution pipeline lies in its diverse matching methods, each targeting specific data attributes (URLs, phone numbers, names, etc.) to identify potential links between organization records. The integration of the **Reinforcement Learning (RL) system** is a pivotal enhancement, providing dynamic, context-aware confidence scores for each **pairwise match**, moving beyond static rules or simple similarity thresholds.  
**General Principle for RL-Guided Confidence Scoring in Matching Methods:**  
For each matching method detailed below, the interaction with the RL system generally follows these steps:

1. **Candidate Pair Identification:** The method's primary algorithm (e.g., normalization and exact matching for emails; fuzzy, semantic, and hybrid approaches for names) identifies potential **pairs** of entities based on its specific criteria.  
2. **Consulting the MatchingOrchestrator (RL System Coordinator):**  
   * Before finalizing a match or when assessing the strength of a potential link between two entities (Entity A, Entity B), the MatchingOrchestrator is invoked.  
   * **Contextual Feature Retrieval:** Relevant contextual features for Entity A and Entity B are fetched from clustering\_metadata.entity\_context\_features. These features describe the entities and their relationship across various dimensions (name similarity, service similarity, data completeness, geographic proximity, etc.).  
   * **ContextModel Prediction:** The ContextModel (e.g., a Random Forest classifier stored in clustering\_metadata.ml\_models) analyzes these features. Its primary role is to predict the most *appropriate* matching method or assess the contextual strength for this specific pair.  
   * **ConfidenceTuner Selection:** The ConfidenceTuner (e.g., a Multi-Armed Bandit system, also stored in clustering\_metadata.ml\_models) then selects an optimal confidence\_score for the match. This selection is influenced by:  
     * The specific matching method being employed (e.g., 'email', 'name').  
     * The historical performance (rewards) of different confidence levels for that method.  
     * The contextual assessment or advice provided by the ContextModel.  
3. **Storing RL-Guided Pairwise Confidence:**  
   * This dynamically determined confidence\_score is stored in the public.entity\_group record for the (Entity A, Entity B) pair, alongside the method\_type and match\_values. This score reflects a nuanced, learned understanding of the match's reliability in the given context.  
4. **Logging for Learning and Transparency:**  
   * The MatchingOrchestrator logs its decision, including a snapshot of the features used, model versions, predicted method (if applicable), and the final confidence, into the clustering\_metadata.entity\_match\_pairs table. This is vital for retraining the RL models and for auditing/understanding system behavior.  
5. **Learning from Human Feedback:**  
   * Human data manager reviews of suggested actions or specific matches (stored in clustering\_metadata.human\_review\_decisions and clustering\_metadata.human\_review\_method\_feedback) are processed by a FeedbackProcessor.  
   * This feedback is used to retrain and fine-tune both the ContextModel and the ConfidenceTuner, allowing the system to continuously improve its decision-making and confidence calibration.  
6. **Suggesting Human Review:** If the final RL-guided confidence\_score for a pair falls below configurable thresholds (defined in src/config.rs), a suggestion for human review (e.g., REVIEW\_ENTITY\_IN\_GROUP) may be logged in clustering\_metadata.suggested\_actions.

*(For a more detailed narrative on the RL components and their interaction, please refer to the "Understanding Our Intelligent Matching System" document.)*

### **1\. URL Matching**

* **Data Source**: organization.url and service.url (linked via entity\_feature).  
* **Algorithm**:  
  1. Extract domains from URLs.  
  2. Normalize domains (lowercase, remove "www.", etc.).  
  3. Exclude common, non-identifying domains (e.g., social media, URL shorteners) as defined in matching/url.rs (is\_ignored\_domain function).  
  4. Identify pairs of entities sharing identical, non-ignored normalized domains.  
* **Incremental Processing**:  
  * Checks public.entity\_group for existing 'url' matches for a given entity pair to avoid re-processing.  
  * For new pairs sharing a domain, proceeds to RL scoring.  
* **RL-Guided Confidence**:  
  * While a shared, specific domain is a strong indicator (e.g., base confidence 0.9), the final confidence\_score stored in entity\_group.confidence\_score for the (Entity A, Entity B) pair is determined by the MatchingOrchestrator.  
  * The RL system considers contextual features. If two entities share mycharity.org but have vastly different names, services, and locations, the ContextModel might flag this as ambiguous, leading the ConfidenceTuner to assign a lower confidence. Conversely, alignment in other features could bolster confidence.  
* **Match Values Storage**: entity\_group.match\_values would store original\_url1, original\_url2, and normalized\_shared\_domain.  
* **Implementation Reference**: src/matching/url.rs

### **2\. Phone Matching**

* **Data Source**: phone table (linked via entity\_feature).  
* **Algorithm**:  
  1. Normalize phone numbers (remove non-numeric characters, basic US country code handling). (Function: normalize\_phone in matching/phone.rs).  
  2. Identify pairs of entities sharing identical normalized phone numbers.  
  3. Phone extensions are considered; matches with consistent extensions (both same or both NULL) are typically stronger base cases.  
* **Incremental Processing**: Checks public.entity\_group for existing 'phone' matches for an entity pair.  
* **RL-Guided Confidence**:  
  * Base confidences (e.g., 0.95 for exact match with consistent extensions, 0.85 if extensions differ) serve as initial signals.  
  * The MatchingOrchestrator refines this. If entities share a phone but are in disparate locations or have dissimilar names/services, the ContextModel signals higher risk, and the ConfidenceTuner adjusts the final confidence\_score in entity\_group accordingly.  
* **Match Values Storage**: entity\_group.match\_values would store original\_phone1, original\_phone2, normalized\_shared\_phone, extension1, extension2.  
* **Implementation Reference**: src/matching/phone.rs

### **3\. Email Matching**

* **Data Source**: organization.email and service.email (linked via entity\_feature).  
* **Algorithm**:  
  1. Normalize email addresses (lowercase, trim, Gmail-specific normalizations like removing dots and '+' aliases). (Function: normalize\_email in matching/email.rs).  
  2. Identify pairs of entities sharing identical normalized email addresses.  
* **Incremental Processing**: Checks public.entity\_group for existing 'email' matches for an entity pair.  
* **RL-Guided Confidence**:  
  * An exact email match often has a high base confidence (e.g., 1.0).  
  * The MatchingOrchestrator is critical. If contextual features (e.g., highly different names, services, locations despite a shared generic email like info@domain.com) suggest ambiguity, the ContextModel flags this.  
  * The ConfidenceTuner, informed by this context, assigns a final confidence\_score (potentially much lower than 1.0) to the entity\_group record for the pair, reflecting the learned risk.  
* **Match Values Storage**: entity\_group.match\_values would store original\_email1, original\_email2, and normalized\_shared\_email.  
* **Implementation Reference**: src/matching/email.rs

### **4\. Address Matching**

* **Data Source**: address table (linked via location and entity\_feature).  
* **Algorithm**:  
  1. Normalize addresses (lowercase, remove punctuation, standardize abbreviations, remove unit details to get a base street address). (Function: normalize\_address in matching/address.rs).  
  2. Identify pairs of entities sharing identical normalized base addresses.  
* **Incremental Processing**: Checks public.entity\_group for existing 'address' matches for an entity pair.  
* **RL-Guided Confidence**:  
  * A normalized address match has a strong base confidence (e.g., 0.95).  
  * The MatchingOrchestrator adjusts this. If entities share an address but have very different names and no shared phone/URL (e.g., different businesses in the same large building), the ContextModel might perceive higher risk, leading the ConfidenceTuner to assign a lower confidence\_score to the entity\_group pair.  
* **Match Values Storage**: entity\_group.match\_values would store original\_address1, original\_address2, and normalized\_shared\_address.  
* **Implementation Reference**: src/matching/address.rs

### **5\. Name Matching**

* **Data Source**: organization.name (from entity.name). Organization embeddings (organization.embedding) are also used.  
* **Algorithm (for pairs of entities)**:  
  1. **Normalization (normalize\_name in matching/name.rs):** Lowercase, remove legal suffixes (Inc, LLC), standardize abbreviations, normalize punctuation.  
  2. **Hybrid Pairwise Similarity Calculation:**  
     * **Fuzzy String Similarity:** Jaro-Winkler similarity on normalized names (handles typos). Threshold: MIN\_FUZZY\_SIMILARITY.  
     * **Semantic Similarity:** Cosine similarity between organization.embedding vectors (handles conceptually similar but textually different names). Threshold: MIN\_SEMANTIC\_SIMILARITY.  
     * **Combined Scoring:** If semantic is high, a weighted score is used (e.g., 60% semantic, 40% fuzzy). Otherwise, if only fuzzy is high, that's used. This score must exceed COMBINED\_THRESHOLD.  
  3. Identify pairs of entities whose combined (or individual) similarity score passes the threshold.  
* **Incremental Processing**: Checks public.entity\_group for existing 'name' matches for an entity pair.  
* **RL-Guided Confidence**:  
  * The name matching module might define base confidences for different pre-RL match types (e.g., CONFIDENCE\_SEMANTIC \= 0.90, CONFIDENCE\_FUZZY \= 0.80).  
  * When a pair (Entity A, Entity B) is identified as a potential name match based on the above algorithm, the MatchingOrchestrator is consulted.  
  * The RL system determines the final confidence\_score for the entity\_group record. This score might blend the pre-RL similarity score with the ContextModel's output or be primarily driven by the RL system's assessment of the pair's overall context.  
  * The match\_type (e.g., "fuzzy", "semantic", "combined", "ml\_guided") can be logged in entity\_group.match\_values.  
* **Match Values Storage**: entity\_group.match\_values would store original\_name1, original\_name2, normalized\_name1, normalized\_name2, the pre-RL similarity\_score, and pre-RL match\_type.  
* **Implementation Reference**: src/matching/name.rs

### **6\. Geospatial Matching**

* **Data Source**: location.latitude, location.longitude (and location.geom), service.embedding\_v2.  
* **Algorithm (identifies candidate sets, then evaluates pairs):**  
  1. **Proximity-Based Candidate Identification:**  
     * If PostGIS is available: Uses ST\_DWithin or ST\_ClusterDBSCAN with various distance thresholds (e.g., \<100m, \<500m, \<2km from matching/geospatial/config.rs) to find sets of entities that are geographically close.  
     * If PostGIS is not available: Calculates Haversine distances to find proximate sets.  
  2. **Pairwise Evaluation within Proximate Sets:**  
     * For each unique pair of entities (Entity A, Entity B) found within a geographically proximate set:  
       * **Service Similarity Check (service\_utils::compare\_entity\_services):** Their services are compared using service.embedding\_v2 and cosine similarity. The average service similarity must meet SERVICE\_SIMILARITY\_THRESHOLD. This prevents matching unrelated organizations that are merely co-located (e.g., different shops in a mall).  
       * If both proximity and service similarity checks pass, the pair becomes a candidate for RL scoring.  
* **Incremental Processing**: Checks public.entity\_group for existing 'geospatial' matches for an entity pair.  
* **RL-Guided Confidence**:  
  * Each distance threshold has a base confidence (e.g., \<100m \-\> 0.95).  
  * When a pair (Entity A, Entity B) passes the distance and service similarity checks, the MatchingOrchestrator is consulted.  
  * The ContextModel analyzes all features of the pair. The ConfidenceTuner then determines the final confidence\_score for the entity\_group record, blending the base distance-derived confidence with the RL system's contextual assessment (e.g., (ml\_conf \* 0.7) \+ (base\_confidence \* 0.3)).  
* **Match Values Storage**: entity\_group.match\_values could store latitudes/longitudes for the entities, the distance between them, and the service similarity score.  
* **Implementation Reference**: src/matching/geospatial/core.rs

### **7\. Semantic-Geospatial Service Matching (Service-Level, Not Entity Grouping)**

* **Note:** This method is distinct from the six entity grouping methods. It operates *within* already established public.group\_cluster records to find matches between *services*, not to form new entity groups.  
* **Data Source**: service.embedding\_v2, service\_at\_location, location.geom.  
* **Algorithm**:  
  1. **Scope:** Operates on services belonging to entities within the *same public.group\_cluster*.  
  2. **Semantic Similarity:** Uses vector cosine similarity (pgvector's \<=\> on service.embedding\_v2) to find semantically similar service pairs (e.g., similarity \>= 0.85).  
  3. **Geospatial Verification:** For semantically similar service pairs, it verifies they share at least one nearby physical location (PostGIS ST\_DWithin on location.geom, e.g., within 2km). If location data is incomplete, may fall back to semantic-only.  
* **Incremental Processing**:  
  * Compares services primarily within the same entity cluster.  
  * Checks for existing public.service\_match records to avoid duplicates.  
* **Confidence**:  
  * The confidence for a public.service\_match is primarily based on the semantic similarity score.  
  * This method does **not** typically use the entity-level RL MatchingOrchestrator for its confidence scores, as it's focused on service-to-service similarity. However, the quality of the entity clusters it operates on *is* influenced by the RL system's earlier work.  
* **Outcome**: Creates public.service\_match records (status 'potential') for service pairs that are likely duplicates. These are then subject to human review. Confirmed matches can be used to form conceptual service clusters (e.g., by populating public.service\_cluster).  
* **Implementation Reference**: src/service\_matching/semantic\_geospatial.rs